{"version":3,"file":"static/js/108.3b5447a5.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/nft-collection-3e2eacc3.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-237af208.esm.js';\nimport { aG as StandardErc721, co as ContractWrapper, ai as ContractMetadata, cA as TokenErc721ContractSchema, aj as ContractRoles, ak as ContractRoyalty, al as ContractPrimarySale, ah as ContractEncoder, aS as GasCostEstimator, aT as ContractEvents, aV as ContractPlatformFee, aU as ContractInterceptor, ax as Erc721, aA as Erc721WithQuantitySignatureMintable, aX as ContractOwner, bs as getRoleHash } from './thirdweb-checkout-ba684061.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'eventemitter3';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getContract(\"{{contract_address}}\", \"nft-collection\");\n * ```\n *\n * @public\n */\n\nclass NFTCollection extends StandardErc721 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n\n    _defineProperty(this, \"abi\", void 0);\n\n    _defineProperty(this, \"metadata\", void 0);\n\n    _defineProperty(this, \"roles\", void 0);\n\n    _defineProperty(this, \"encoder\", void 0);\n\n    _defineProperty(this, \"estimator\", void 0);\n\n    _defineProperty(this, \"events\", void 0);\n\n    _defineProperty(this, \"sales\", void 0);\n\n    _defineProperty(this, \"platformFees\", void 0);\n\n    _defineProperty(this, \"royalties\", void 0);\n\n    _defineProperty(this, \"owner\", void 0);\n\n    _defineProperty(this, \"signature\", void 0);\n\n    _defineProperty(this, \"interceptor\", void 0);\n\n    _defineProperty(this, \"erc721\", void 0);\n\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTCollection.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n  /**\n   * @internal\n   */\n\n\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n\n\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mint(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n\n\n  async mint(metadata) {\n    return this.erc721.mint(metadata);\n  }\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n\n\n  async mintTo(walletAddress, metadata) {\n    return this.erc721.mintTo(walletAddress, metadata);\n  }\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n\n\n  async mintBatch(metadata) {\n    return this.erc721.mintBatch(metadata);\n  }\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n\n\n  async mintBatchTo(walletAddress, metadata) {\n    return this.erc721.mintBatchTo(walletAddress, metadata);\n  }\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n\n\n  async burn(tokenId) {\n    return this.erc721.burn(tokenId);\n  }\n  /**\n   * @internal\n   */\n\n\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return this.contractWrapper.call(functionName, ...args);\n  }\n\n}\n\n_defineProperty(NFTCollection, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { NFTCollection };\n"],"names":["NFTCollection","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","metadata","ContractMetadata","TokenErc721ContractSchema","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","erc721","Erc721","signature","Erc721WithQuantitySignatureMintable","owner","ContractOwner","this","updateSignerOrProvider","readContract","hasRole","getRoleHash","constants","anyoneCanTransfer","mint","walletAddress","mintTo","mintBatch","mintBatchTo","tokenId","burn","functionName","_len","args","Array","_key","call","StandardErc721"],"sourceRoot":""}